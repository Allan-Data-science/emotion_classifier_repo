# -*- coding: utf-8 -*-
"""CLI

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17lAaDskGGC6UrQVfeAp7vm8pjCphZHN2
"""

# emotion_classifier/cli.py
import argparse
from .predictor import EmotionPredictor

# --- Configuration ---
# This should be your actual Kaggle username/ID
KAGGLE_ID = "your_kaggle_id_here" # <<<--- REPLACE THIS

def main():
    parser = argparse.ArgumentParser(
        description="CLI tool for tweet emotion classification.",
        formatter_class=argparse.RawTextHelpFormatter
    )
    parser.add_argument(
        "--input",
        type=str,
        help="Text input for emotion prediction.\nExample: inference --input \"I love this!\""
    )
    parser.add_argument(
        "--kaggle",
        action="store_true",
        help="Display the configured Kaggle username."
    )

    args = parser.parse_args()

    if args.kaggle:
        if "your_kaggle_id_here" in KAGGLE_ID:
             print("Please replace 'your_kaggle_id_here' in emotion_classifier/cli.py with your actual Kaggle ID.")
        else:
            print(KAGGLE_ID)
    elif args.input:
        try:
            # The predictor is a singleton, so it initializes (loads model) only on first call
            predictor = EmotionPredictor()
            if not predictor._initialized: # Check if initialization failed earlier
                print("Could not proceed with prediction due to predictor initialization failure.")
                return
            emotion = predictor.predict(args.input)
            print(emotion)
        except FileNotFoundError as e:
            print(f"Error: A required model asset file was not found. {e}")
            print("Please ensure model assets are downloaded correctly (check URLs in model_loader.py and internet connection).")
        except Exception as e:
            print(f"An unexpected error occurred during prediction: {e}")
            # For debugging, you might want to print the full traceback
            # import traceback
            # traceback.print_exc()
    else:
        parser.print_help()

if __name__ == "__main__":
    main()